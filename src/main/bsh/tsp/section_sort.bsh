import fiji.util.gui.GenericDialogPlus;

import ij.IJ;
import ij.ImagePlus;
import ij.ImageStack;
import ij.gui.GenericDialog;

import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.ObjectOutputStream;
import java.io.PrintWriter;
import java.lang.Number;
import java.lang.String;
import java.lang.StringBuilder;
import java.lang.Thread;
import java.lang.reflect.Field;
import java.util.Arrays;

import mpicbg.ij.SIFT;
import mpicbg.models.AffineModel2D;

import net.imglib2.img.ImagePlusAdapter;
import net.imglib2.img.array.ArrayImgFactory;
import net.imglib2.img.display.imagej.ImageJFunctions;

import org.janelia.similarity.SiftPairwiseSimilarity;
import org.janelia.sort.tsp.TSP;
import org.janelia.sort.tsp.conversion.DataToStringFullMatrixTSPLIB;
import org.janelia.sort.tsp.conversion.SimilarityToDistanceSigmoid;


File writeToFile( String data, String fn ) {
  return writeToFile( data, fn, null );
}


File writeToFile( String data, String fn, tmpDir ) {
  return writeToFile( data, fn, tmpDir, null );
}


File writeToFile( String data, String fn, tmpDir, suffix ) {
  file = null;
  if ( fn.equals( "" ) )
     file = File.createTempFile( "tmp", suffix, new File( tmpDir ) );
  else
     file = new File( fn );
  file.setWritable( true );
  fs = new FileOutputStream( file );
  final OutputStream buffer = new BufferedOutputStream( fs );
  final PrintWriter output = new PrintWriter( buffer );
  output.print( data );
  output.close();
  buffer.close();
  return file;
}


String join( String separator, Iterator it ) {
  if ( ! it.hasNext() )
    return null;
  sb = new StringBuilder( it.next().toString() );
  while( it.hasNext() ) {
    sb.append( separator );
    sb.append( it.next().toString() );
  }
  return sb.toString();
}


String join( String separator, Object[] arr ) {
  size = arr.length;
  if ( size < 1 )
    return null;
  sb = new StringBuilder( arr[0].toString() );
  for ( int i = 1; i < size; ++i ) {
    sb.append( separator );
    sb.append( arr[i].toString() );
  }
  return sb.toString();
}


ImageStack duplicateWithoutMissing( stack, ignore ) {
  removeSize = ignore.size();
  oldSize    = stack.getSize();
  newSize    = oldSize - removeSize;
  if ( removeSize == 0 )
    return stack;
  resultStack = new ImageStack( stack.getWidth(), stack.getHeight() );
  int rIndex = 0;
  for ( int i = 1; i <= oldSize; ++i ) {
    if ( rIndex < removeSize && i == ignore.get( rIndex ) ) {
      rIndex += 1;
      continue;
    }
    resultStack.addSlice( stack.getProcessor( i ) );
  }
  return resultStack;
}


sectionSortTempDir = System.getProperty( "java.io.tmpdir" ) + File.separator + "section-sort";
new File( sectionSortTempDir ).mkdirs();

fijiRootDir = IJ.getDirectory( "imagej" );
fijiBinDir  = fijiRootDir.replaceFirst( File.separator + "$", "" ) + File.separator + "bin";


optionsDialog = new GenericDialogPlus( "Options for section-sort using TSP." );
optionsDialog.addRadioButtonGroup( "Input is stack or similarity matrix.", new String[] { "stack", "matrix" }, 1, 2, "stack" );
optionsDialog.addDirectoryOrFileField( "Path to input stack or matrix (use current image if not specified)", "" );
optionsDialog.addDirectoryOrFileField( "Path to section directory for result files (existing files will be overwritten, results will not be written to file if empty)" , "" );
optionsDialog.showDialog();
if ( optionsDialog.wasCanceled() ) {
   // do something, just crash or show error message
} else {
  stackImp        = null;
  stack           = null;
  matrixImp       = null;
  matrix          = null;
  choices         = optionsDialog.getStringFields();
  radios          = optionsDialog.getRadioButtonGroups();
  inputPath       = optionsDialog.getNextString();
  problem         = ""; // optionsDialog.getNextString();
  solution        = ""; // optionsDialog.getNextString();
  resultDirectory = optionsDialog.getNextString();
  inputIsMatrix   = radios.get( 0 ).getSelectedCheckbox().getLabel() == "matrix";
  concorde        = fijiBinDir.replaceFirst( File.separator + "$", "" ) + File.separator + "concorde";
  
  if ( inputIsMatrix ) {
    matrixImp = inputPath.equals( "" ) ? IJ.getImage() : new ImagePlus( inputPath );
    matrix     = ImagePlusAdapter.wrapFloat( matrixImp );
  } else {
    param = SiftPairwiseSimilarity.generateDefaultParameters();
    // stackOptionsDialog = createDefaultDialog( param, 
    //                                           "Options for calculating pairwise similarities." );
    stackOptionsDialog = new GenericDialog( "Options for calculating pairwise similarities." );
    stackOptionsDialog.addNumericField( "maxSteps : ", param.maxSteps, 0 );
    stackOptionsDialog.addNumericField( "rod : ", param.rod, 4 );
    stackOptionsDialog.addNumericField( "maxEpsilon : ", param.maxEpsilon, 4 );
    stackOptionsDialog.addNumericField( "minInlierRatio : ", param.minInlierRatio, 4 );
    stackOptionsDialog.addNumericField( "minNumInliers : ", param.minNumInliers, 0 );
    stackOptionsDialog.addNumericField( "nThreads : ", param.nThreads, 0 );
    stackOptionsDialog.addNumericField( "range : ", param.range, 0 );
    stackOptionsDialog.addRadioButtonGroup( "Show matrix progress while being filled", new String[] { "yes", "no" }, 1, 2, param.showProgress ? "yes" : "no" );
    stackOptionsDialog.showDialog();
    if ( stackOptionsDialog.wasCanceled() ) {
     // keep default parameters?
    } else {
      values = stackOptionsDialog.getNumericFields();
      radios = stackOptionsDialog.getRadioButtonGroups();
                      
      param.maxSteps       = Integer.parseInt( values.get( 0 ).text );
      param.rod            = Float.parseFloat( values.get( 1 ).text );
      param.maxEpsilon     = Float.parseFloat( values.get( 2 ).text );
      param.minInlierRatio = Float.parseFloat( values.get( 3 ).text );
      param.minNumInliers  = Integer.parseInt( values.get( 4 ).text );
      param.nThreads       = Integer.parseInt( values.get( 5 ).text );
      param.range          = Integer.parseInt( values.get( 6 ).text );
      param.showProgress   = radios.get( 0 ).getSelectedCheckbox().getLabel() == "yes";
                      
      siftOptionsDialog = new GenericDialog( "Options for calculating SIFT features." );
      SIFT.addFields( siftOptionsDialog, param.p );
      siftOptionsDialog.showDialog();
      if ( siftOptionsDialog.wasCanceled() ) {

      } else {
        SIFT.readFields( siftOptionsDialog, param.p );
                        
        stackImp = inputPath.equals( "" ) ? IJ.getImage() : new ImagePlus( inputPath );
        stack    = ImagePlusAdapter.wrapFloat( stackImp );
                        
        sps       = new SiftPairwiseSimilarity( param );
        model     = new AffineModel2D();
        matrixImp = sps.calculateSimilarityMatrix( stackImp, model );
        matrix    = ImagePlusAdapter.wrapFloat( matrixImp );
        stackImp.show();
      }
    }
  }

  if ( matrix != null ) {
    ImageJFunctions.show( matrix, "original matrix" );
    keep             = new ArrayList();
    remove           = new ArrayList();
    cleanMatrix      = TSP.cleanMatrix( matrix, remove, keep );
    n                = (int) cleanMatrix.dimension( 0 );
    distances        = TSP.convertMatrix( cleanMatrix, new DataToStringFullMatrixTSPLIB(), new SimilarityToDistanceSigmoid( 10000.0, 0.0, 1000000 ) );
    problemFilename  = problem;
    solutionFilename = solution;

    ImageJFunctions.show( cleanMatrix, "matrix without bad sections" );

    rt = Runtime.getRuntime();

    if ( solutionFilename.equals( "" ) ) {
       sf               = File.createTempFile( "tmp", null, new File( sectionSortTempDir ) );
       solutionFilename = sf.getAbsolutePath();
       r = new Runnable() { void run() { if (!sf.delete()) sf.deleteOnExit(); } };
       t = new Thread( r );
       rt.addShutdownHook( t );
       sf.setWritable( true );
    }
    
    pf = writeToFile( distances, problemFilename, sectionSortTempDir );
    if ( problemFilename.equals( "" ) ) {
       pf.deleteOnExit();
       problemFilename = pf.getAbsolutePath();
       r = new Runnable() { void run() { if (!pf.delete()) pf.deleteOnExit(); } };
       t = new Thread( r );
       rt.addShutdownHook( t );
    }
    concordeDeleteFilenameArgument = "";
    proc                           = TSP.runConcordeTSPSolver( concorde, problemFilename, solutionFilename, concordeDeleteFilenameArgument );
    proc.waitFor();
    // result       = TSP.tspResultToArray( solutionFilename, (int)n );
    result       = TSP.tspResultToArrayRespectDummyNode( solutionFilename, (int)n );
    sortedMatrix = TSP.rearrangeMatrix( cleanMatrix, result );
    ImageJFunctions.show( sortedMatrix, "sorted matrix" );
    IJ.log( "Section order: " + Arrays.toString( result ) );
    if ( ! resultDirectory.equals( "" ) ) {
      targetDir = new File( resultDirectory );
      targetDir.mkdirs();
      forwardMappingFile  = resultDirectory + File.separator + "forward-mapping";
      backwardMappingFile = resultDirectory + File.separator + "backward-mapping";
      removedSectionsFile = resultDirectory + File.separator + "removed-sections";
      resultObjects       = new Integer[ result.length ];
      forwardMappings     = new String[ result.length ];
      backwardMappings    = new String[ result.length ];
      removedSections     = new Long[ remove.size() ];
      for ( int i = 0; i < result.length; ++i ) {
        currVal                  = result[i];
        resultObjects[i]         = currVal; 
        forwardMappings[currVal] = currVal + "," + i;
        backwardMappings[i]      = i + "," + currVal;
      }
      for ( int i = 0; i < remove.size(); ++i ) {
        removedSections[i] = remove.get( i );
      }
      writeToFile( join( "\n", forwardMappings ), forwardMappingFile );
      writeToFile( join( "\n", backwardMappings ), backwardMappingFile );
      writeToFile( remove.size() > 0 ? join( "\n", removedSections ) : "", removedSectionsFile );
    }

    if ( stackImp == null ) {
      addStackForSortingDialog = new GenericDialogPlus( "Add stack for rearrangement." );
      addStackForSortingDialog.addMessage( "No image stack present. If you would like to rearrange a stack, \nplease specify a path to the stack. Click cancel otherwise." );
      addStackForSortingDialog.addDirectoryOrFileField( "Path to image stack : ", "" );
      addStackForSortingDialog.showDialog();
      stackPath = addStackForSortingDialog.getNextString();
      if ( ( ! addStackForSortingDialog.wasCanceled() ) && ( ! stackPath.equals( "" ) ) ) {
        stackImp = new ImagePlus( stackPath );
        if ( stackImp.getHeight() == 0 || stackImp.getWidth() == 0 )
          stackImp = null;
      }
    }

    if ( stackImp != null ) {
      cleanStack = duplicateWithoutMissing( stackImp.getStack(), remove );
      cleanImp   = new ImagePlus( "clean stack", cleanStack );
      cleanImp.show();

      w = cleanStack.getWidth();
      h = cleanStack.getHeight();
      s = cleanStack.getSize();
      
      rearrangedCleanStack = new ImageStack( w, h, s );
      for ( int i = 1; i <= s; ++i ) {
        p = cleanStack.getProcessor( result[ i - 1 ] + 1 );
        rearrangedCleanStack.setProcessor( p, i );
      }
      rearrangedCleanImp = new ImagePlus( "rearranged clean stack", rearrangedCleanStack );
      rearrangedCleanImp.show();
    }
  }
}

