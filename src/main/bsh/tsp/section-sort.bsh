import ij.IJ;
import ij.ImagePlus;
import ij.gui.GenericDialog;

import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.ObjectOutputStream;
import java.io.PrintWriter;
import java.lang.Number;
import java.lang.StringBuilder;
import java.lang.Thread;
import java.lang.reflect.Field;
import java.util.Arrays;

import mpicbg.ij.SIFT;
import mpicbg.models.AffineModel2D;

import net.imglib2.img.ImagePlusAdapter;
import net.imglib2.img.array.ArrayImgFactory;
import net.imglib2.img.display.imagej.ImageJFunctions;

import org.janelia.similarity.SiftPairwiseSimilarity;
import org.janelia.sort.tsp.TSP;
import org.janelia.sort.tsp.conversion.DataToStringFullMatrixTSPLIB;
import org.janelia.sort.tsp.conversion.SimilarityToDistanceSigmoid;


File writeToFile( String data, String fn ) {
  return writeToFile( data, fn, null );
}


File writeToFile( String data, String fn, tmpDir ) {
  return writeToFile( data, fn, tmpDir, null );
}


File writeToFile( String data, String fn, tmpDir, suffix ) {
  file = null;
  if ( fn.equals( "" ) )
     file = File.createTempFile( "tmp", suffix, new File( tmpDir ) );
  else
     file = new File( fn );
  file.setWritable( true );
  fs = new FileOutputStream( file );
  final OutputStream buffer = new BufferedOutputStream( fs );
  final PrintWriter output = new PrintWriter( buffer );
  output.print( data );
  output.close();
  buffer.close();
  return file;
}


String join( String separator, Object[] arr ) {
  size = arr.length;
  if ( size < 1 )
    return null;
  sb = new StringBuilder( arr[0].toString() );
  for ( int i = 1; i < size; ++i ) {
    sb.append( separator );
    sb.append( arr[i].toString() );
  }
  return sb.toString();
}


// GenericDialog createDefaultDialog( Object o, String title ) {
//   dialog = new GenericDialog( title );
//   for ( Field f : o.getClass().getDeclaredFields() ) {
//     opt = f.getName();
//     val = f.get( o );
//     if ( val instanceof String )
//       dialog.addStringField( opt, val );
//     else if ( val instanceof Boolean )
//       dialog.addRadioButtonGroup( opt, new String[] { "yes", "no" }, 1, 2, val? "yes" : "no" );
//     else if ( val instanceof Number )
//       dialog.addNumericField( opt, val, 4 ); // howto deal with number of digits? (4)
//   }
//   return dialog;
// }


sectionSortTempDir = System.getProperty( "java.io.tmpdir" ) + File.separator + "section-sort";
new File( sectionSortTempDir ).mkdirs();

fijiRootDir = IJ.getDirectory( "imagej" );
fijiBinDir  = fijiRootDir.replaceFirst( File.separator + "$", "" ) + File.separator + "bin";


optionsDialog = new GenericDialog( "Options for section-sort using TSP." );
optionsDialog.addRadioButtonGroup( "Input is stack or similarity matrix.", new String[] { "stack", "matrix" }, 1, 2, "stack" );
// optionsDialog.addStringField( "Path to input stack or matrix", "/hanslovskyp/workspace/section-sort/src/test/java/org/janelia/sort/tsp/AVG_inlier ratio matrix-excerpt.tif" );
// optionsDialog.addStringField( "Path to input stack or matrix", "/hanslovskyp/workspace/section-sort/test_data_features.tif" );
optionsDialog.addStringField( "Path to input stack or matrix (use current image if not specified)", "" );
// optionsDialog.addStringField( "Path to concorde executable", "concorde" );
optionsDialog.addStringField( "Path to tsp problem file (will be tmp if not specified)", "" );
optionsDialog.addStringField( "Path to tsp solution file (will be tmp if not specified)", "" );
optionsDialog.addStringField( "Path to section order result file (results will not be written to file if empty)" , "" );
optionsDialog.showDialog();
if ( optionsDialog.wasCanceled() ) {
   // do something, just crash or show error message
} else {
  stackImp            = null;
  stack               = null;
  matrixImp           = null;
  matrix              = null;
  choices             = optionsDialog.getStringFields();
  radios              = optionsDialog.getRadioButtonGroups();
  inputPath           = optionsDialog.getNextString();
  problem             = optionsDialog.getNextString();
  solution            = optionsDialog.getNextString();
  orderedSectionsFile = optionsDialog.getNextString();
  inputIsMatrix       = radios.get( 0 ).getSelectedCheckbox().getLabel() == "matrix";
  concorde            = fijiBinDir.replaceFirst( File.separator + "$", "" ) + File.separator + "concorde";
  
  if ( inputIsMatrix ) {
    matrixImp = inputPath.equals( "" ) ? IJ.getImage() : new ImagePlus( inputPath );
    matrix     = ImagePlusAdapter.wrapFloat( matrixImp );
  } else {
    param = SiftPairwiseSimilarity.generateDefaultParameters();
    // stackOptionsDialog = createDefaultDialog( param, 
    //                                           "Options for calculating pairwise similarities." );
    stackOptionsDialog = new GenericDialog( "Options for calculating pairwise similarities." );
    stackOptionsDialog.addNumericField( "maxSteps", param.maxSteps, 0 );
    stackOptionsDialog.addNumericField( "rod", param.rod, 4 );
    stackOptionsDialog.addNumericField( "maxEpsilon", param.maxEpsilon, 4 );
    stackOptionsDialog.addNumericField( "minInlierRatio", param.minInlierRatio, 4 );
    stackOptionsDialog.addNumericField( "minNumInliers", param.minNumInliers, 0 );
    stackOptionsDialog.addNumericField( "nThreads", param.nThreads, 0 );
    stackOptionsDialog.addNumericField( "range", param.range, 0 );
    // stackOptionsDialog.addNumericField( "fdSize", param.p.fdSize, 0 );
    // stackOptionsDialog.addNumericField( "fdBins", param.p.fdBins, 0 );
    // stackOptionsDialog.addNumericField( "maxOctaveSize", param.p.maxOctaveSize, 0 );
    // stackOptionsDialog.addNumericField( "minOctaveSize", param.p.minOctaveSize, 0 );
    // stackOptionsDialog.addNumericField( "steps", param.p.steps, 0 );
    // stackOptionsDialog.addNumericField( "initialSigma", param.p.initialSigma, 4 );
    stackOptionsDialog.addRadioButtonGroup( "Show matrix progress while being filled", new String[] { "yes", "no" }, 1, 2, param.showProgress ? "yes" : "no" );
    stackOptionsDialog.showDialog();
    if ( stackOptionsDialog.wasCanceled() ) {
     // keep default parameters?
    } else {
      values = stackOptionsDialog.getNumericFields();
      radios = stackOptionsDialog.getRadioButtonGroups();
                      
      param.maxSteps       = Integer.parseInt( values.get( 0 ).text );
      param.rod            = Float.parseFloat( values.get( 1 ).text );
      param.maxEpsilon     = Float.parseFloat( values.get( 2 ).text );
      param.minInlierRatio = Float.parseFloat( values.get( 3 ).text );
      param.minNumInliers  = Integer.parseInt( values.get( 4 ).text );
      param.nThreads       = Integer.parseInt( values.get( 5 ).text );
      param.range          = Integer.parseInt( values.get( 6 ).text );
      param.showProgress   = radios.get( 0 ).getSelectedCheckbox().getLabel() == "yes";
                      
      // param.p.fdSize        = Integer.parseInt( values.get(  7 ).text );
      // param.p.fdBins        = Integer.parseInt( values.get(  8 ).text );
      // param.p.maxOctaveSize = Integer.parseInt( values.get(  9 ).text );
      // param.p.minOctaveSize = Integer.parseInt( values.get( 10 ).text );
      // param.p.steps         = Integer.parseInt( values.get( 11 ).text );
      // param.p.initialSigma  = Float.parseFloat( values.get( 12 ).text );
                      
      siftOptionsDialog = new GenericDialog( "Options for calculating SIFT features." );
      SIFT.addFields( siftOptionsDialog, param.p );
      siftOptionsDialog.showDialog();
      if ( siftOptionsDialog.wasCanceled() ) {

      } else {
        SIFT.readFields( siftOptionsDialog, param.p );
                        
        stackImp = inputPath.equals( "" ) ? IJ.getImage() : new ImagePlus( inputPath );
        stack    = ImagePlusAdapter.wrapFloat( stackImp );
                        
        sps       = new SiftPairwiseSimilarity( param );
        model     = new AffineModel2D();
        matrixImp = sps.calculateSimilarityMatrix( stackImp, model );
        matrix    = ImagePlusAdapter.wrapFloat( matrixImp );
        stackImp.show();
      }
    }
  }

  if ( matrix != null ) {
    ImageJFunctions.show( matrix, "original matrix" );
    n          = matrixImp.getHeight();
    distances  = TSP.convertMatrix( matrix, new DataToStringFullMatrixTSPLIB(), new SimilarityToDistanceSigmoid( 10000.0 ) );
    problemFilename  = problem;
    solutionFilename = solution;

    rt = Runtime.getRuntime();

    if ( solutionFilename.equals( "" ) ) {
       sf               = File.createTempFile( "tmp", null, new File( sectionSortTempDir ) );
       solutionFilename = sf.getAbsolutePath();
       r = new Runnable() { void run() { if (!sf.delete()) sf.deleteOnExit(); } };
       t = new Thread( r );
       rt.addShutdownHook( t );
       sf.setWritable( true );
    }
    
    pf = writeToFile( distances, problemFilename, sectionSortTempDir );
    if ( problemFilename.equals( "" ) ) {
       pf.deleteOnExit();
       problemFilename = pf.getAbsolutePath();
       r = new Runnable() { void run() { if (!pf.delete()) pf.deleteOnExit(); } };
       t = new Thread( r );
       rt.addShutdownHook( t );
    }
    // deleteOnExit() does not have any effect? WHY? ImageJ/FIJI related? -> System.addShutDownHook
    proc   = TSP.runConcordeTSPSolver( concorde, problemFilename, solutionFilename );
    proc.waitFor();
    result = TSP.tspResultToArray( solutionFilename, (int)n );
    sortedMatrix = TSP.rearrangeMatrix( matrix, result );
    ImageJFunctions.show( sortedMatrix, "sorted matrix" );
    IJ.log( "Section order: " + Arrays.toString( result ) );
    if ( ! orderedSectionsFile.equals( "" ) ) {
      resultObjects = new Integer[ result.length ];
      for ( int i = 0; i < result.length; ++i )
        resultObjects[i] = result[i];
      writeToFile( join( "\n", resultObjects ), orderedSectionsFile );
    }
  }
}

